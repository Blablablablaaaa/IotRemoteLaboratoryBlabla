@page "/"
@using IotRemoteLaboratory.Interops
@using IotRemoteLaboratory.Models
@using System.Text.Json
@using IotRemoteLaboratory.Mqtt
@* @page "/stand" *@
@rendermode InteractiveServer

<style>
    .main-block {
        display: flex;
        flex-direction: row;
        width: 100vw;
    }

    .video-block {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
    }

    .video-block_player {
        display: flex;
        width: 60vh;
        padding: 16px;
        justify-content: center;
        align-items: center;
        background-color: #303030;
        border-radius: 5px;
    }

    .video-block_buttons {
        align-items: center;
        row-gap: 8px;
        margin-left: 32px;
        display: flex;
        flex-direction: column;
    }

    .video-terminal-block {
        display: flex;
        flex-direction: row;
        margin-bottom: 16px;
    }

    .terminal-block {
        padding: 16px;
        margin-left: 64px;
        display: flex;
        width: 60vh;
        background: #f5f4f4;
        border: #e6edf4 solid 1px;
        border-radius: 3px;
    }
</style>


<div>
</div>


@code {
    [Inject]
    public Models.Stand stand { get; set; }
    [Inject]
    public Session Session { get; set; }
    [Inject]
    public MqttPublisher Publisher { get; set; }
    [Inject]
    public MqttSubscriber Subscriber { get; set; }
    [Inject]
    public JanusWebRTCInterop Janus { get; set; }

    // выбор скорость обмена данными (combobox);

    private bool ButtonState;
    private bool CameraState = true;
    private List<string> TerminalLines { get; set; } = new ();

    private uint FontSize = 14;


    void ButtonClick(int i)
    {
        Publisher.PublishMessageAsync(Topics.LedButtonState, false ? "0" : "1");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

            if (!Publisher.IsConnected)
                Publisher.Connect();
            if (!Subscriber.IsConnected)
                Subscriber.Connect();

            Subscriber.MessageReceivedEvent += MqttMessageHandler;

        }
        base.OnAfterRender(firstRender);
    }


    #region MqttMessage Handlers


    private void MqttMessageHandler(string topic, string message)
    {
        switch (topic)
        {
            case Topics.TerminalDataFrom:
                TerminalDataFromHandler(message);
                break;
            case Topics.TerminalDataTo:
                // answer
                TerminalDataFromHandler(message);
                break;
            case Topics.LedButtonState:
                LedButtonStateHandler(message);
                break;
            case Topics.LedState:
                break;
            case Topics.ButtonNoLedState:
                break;
            case Topics.DebugCodeOutput:
                break;
            case Topics.Webcamera:
                WebcameraHandler(message);
                break;
            default:
                break;
        }
        InvokeAsync(StateHasChanged);
    }

    private void TerminalDataFromHandler(string message)
    {
        TerminalLines.Add(message);
    }

    private void WebcameraHandler(string message)
    {
        if (message != "0" && message != "1")
            return;

        CameraState = message != "0";
    }

    private void LedButtonStateHandler(string message)
    {
        if (message != "0" && message != "1")
            return;

        ButtonState = message != "0";
    }


    #endregion MqttMessage Handlers
}
