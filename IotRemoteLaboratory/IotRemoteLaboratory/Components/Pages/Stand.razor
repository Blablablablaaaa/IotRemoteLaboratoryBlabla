@page "/stand"
@using IotRemoteLaboratory.Interops
@using IotRemoteLaboratory.Models
@using System.Text.Json
@using IotRemoteLaboratory.Mqtt
@* @page "/stand" *@
@rendermode InteractiveServer

<style>
    .workflow-box {
        height: 100%;
        padding: 16px 8px;
        display: flex;
        flex-direction: column;
    }

    .workflow-box__header {
        display: flex;
        margin-bottom: 8px;
    }


    .workflow-box__title {
        flex: 1 0 0;
        font-size: 16px;
        font-weight: 400;
        line-height: 1;
    }

    .workflow-box__combobox {
        flex: 0 0 200px;
    }

    .workflow-box__item {
        margin-bottom: 10px;
        background: #2C2C2C;
        border: 1px solid #1E1E1E;
        padding: 16px;
        flex: 0 0 auto;
    }

        .workflow-box__item.-stretch {
            flex: 1 0 0;
        }

        .workflow-box__item:last-child {
            margin-bottom: 0;
        }
</style>

@* buttons & checkbox *@

<style>
    .stand-workflow {
        display: flex;
        height:100%;
        justify-content: space-between;
    }

    .stand-workflow__left {
        background: #333;
        flex: 0 0 35%;
        margin-right: 16px;
    }

    .stand-workflow__right {
        padding: 16px 8px;
        background: #333;
        flex: 1 0 0;
    }

    .stream-frame {
        height: 300px;
        background: var(--font-color-active);
    }

    .controls-list {
        display: flex;
        flex-wrap: wrap;
        gap: 8px 32px;
    }

    .controls-list__item {
    }
</style>

<div class="stand-workflow">
    <div class="stand-workflow__left">
        <div class="workflow-box">
            <div class="workflow-box__header">
                <div class="workflow-box__title">
                    STM32-Nucleo64-Raspberry Pi
                </div>

                <div class="workflow-box__combobox">
                    <IotRemoteLaboratory.Components.Controls.ComboBox Items="@UartList" />
                </div>
            </div>
            <div class="workflow-box__item">
@*                 <div class="stream-frame">
                </div> *@

                <IotRemoteLaboratory.Components.Controls.StreamFrame />
            </div>

            <div class="workflow-box__item">
                <IotRemoteLaboratory.Components.Controls.CheckBox IsChecked="false" />
            </div>

            <div class="workflow-box__item -stretch">
                <IotRemoteLaboratory.Components.Controls.Terminal PublishMessage="@TerminalMessagePublish" TerminalContent="@TerminalLines" />
            </div>
        </div>
    </div>
    <div class="stand-workflow__right">

        <div class="workflow-box">
            <div class="workflow-box__item -stretch">
                <IotRemoteLaboratory.Components.Controls.MonacoEditor />
            </div>
        </div>
    </div>
</div>


@code {
    [Inject]
    public Models.Stand stand { get; set; }
    [Inject]
    public Session Session { get; set; }
    [Inject]
    public MqttPublisher Publisher { get; set; }
    [Inject]
    public MqttSubscriber Subscriber { get; set; }
    [Inject]
    public JanusWebRTCInterop Janus { get; set; }

    private List<object> UartList = new List<object>()
    {
        "UART 1.1","UART 1.2","UART 1.3","UART 1.4"
    };

    // выбор скорость обмена данными (combobox);

    private bool ButtonState;
    private bool CameraState { get; set; } = true;
    private List<string> TerminalLines { get; set; } = new ();

    private uint FontSize = 14;

    void TerminalMessagePublish(string command)
    {
        Publisher.PublishMessageAsync(Topics.TerminalDataTo, command);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

            if (!Publisher.IsConnected)
                Publisher.Connect();
            if (!Subscriber.IsConnected)
                Subscriber.Connect();

            Subscriber.MessageReceivedEvent += MqttMessageHandler;

        }
        base.OnAfterRender(firstRender);
    }


    #region MqttMessage Handlers


    private void MqttMessageHandler(string topic, string message)
    {
        switch (topic)
        {
            case Topics.TerminalDataFrom:
                TerminalDataFromHandler(message);
                break;
            case Topics.TerminalDataTo:
                // answer
                TerminalDataFromHandler(message);
                break;
            case Topics.LedButtonState:
                LedButtonStateHandler(message);
                break;
            case Topics.LedState:
                break;
            case Topics.ButtonNoLedState:
                break;
            case Topics.DebugCodeOutput:
                break;
            case Topics.Webcamera:
                WebcameraHandler(message);
                break;
            default:
                break;
        }
        InvokeAsync(StateHasChanged);
    }

    private void TerminalDataFromHandler(string message)
    {
        TerminalLines.Add(message);
    }

    private void WebcameraHandler(string message)
    {
        if (message != "0" && message != "1")
            return;

        CameraState = message != "0";
    }

    private void LedButtonStateHandler(string message)
    {
        if (message != "0" && message != "1")
            return;

        ButtonState = message != "0";
    }


    #endregion MqttMessage Handlers
}
