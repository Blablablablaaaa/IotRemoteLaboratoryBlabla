@page "/stand"
@using IotRemoteLaboratory.Core.Interfaces
@using IotRemoteLaboratory.Interops
@using IotRemoteLaboratory.Models
@using IotRemoteLaboratory.Mqtt
@using IotRemoteLaboratory.Mqtt.Core
@rendermode InteractiveServer

<style>
    .workflow-box {
        height: 100%;
        padding: 16px 8px;
        display: flex;
        flex-direction: column;
    }

    .workflow-box__header {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
        align-items: center;
        margin-bottom: 8px;
    }


    .workflow-box__title {
        flex: 1 0 0;
        font-size: 16px;
        font-weight: 400;
        line-height: 1;
    }

    .workflow-box__combobox {
        flex: 0 0 200px;
    }

    .workflow-box__item {
        margin-bottom: 10px;
        background: #2C2C2C;
        border: 1px solid #1E1E1E;
        padding: 16px;
        flex: 0 0 auto;
    }

        .workflow-box__item.-stretch {
            flex: 1 0 0;
        }

        .workflow-box__item:last-child {
            margin-bottom: 0;
        }
</style>

@* buttons & checkbox *@

<style>
    .stand-workflow {
        display: flex;
        height: 100%;
        justify-content: space-between;
    }

    .stand-workflow__left {
        background: #333;
        flex: 0 0 35%;
        margin-right: 16px;
    }

    .stand-workflow__right {
        background: #333;
        flex: 1 0 0;
    }

    .stream-frame {
        height: 200px;
        background: var(--font-color-active);
    }

    .controls-list {
        display: flex;
        flex-wrap: wrap;
        gap: 8px 32px;
    }

    .controls-list__item {
    }

    .stream-frame {
        display: flex;
        border-radius: 5px;
        align-items: center;
        justify-content: center;
        background: #1e1e1e;
    }

        .stream-frame span {
            color: white;
        }

    .workflow-box-grid {
        display: grid;
        grid-auto-flow: column;
        margin-right: 16px;
    }

    .workflow-box-buttons {
        display: flex;
        flex-direction: column;
    }

    .mcu__button {
        padding: 4px;
    }
</style>

<div class="stand-workflow">
    <div class="stand-workflow__left">
        <div class="workflow-box">
            <div class="workflow-box__header">
                <div class="workflow-box__title">
                    @stand.McuPlatform.Name
                </div>

                <div class="workflow-box__combobox">
                    <IotRemoteLaboratory.UI.Components.Controls.ComboBox SelectedItem="@stand.McuPlatform.SelectedUART" Items="@UartList" />
                </div>
            </div>
            <div class="workflow-box__item">
                <div class="stream-frame">
                    @if (CameraState)
                    {
                        <span>Трансляция активна</span>
                    }
                    else
                    {
                        <span>Отсутствует активная трансляция</span>
                    }
                </div>

                @* <IotRemoteLaboratory.Components.Controls.StreamFrame /> *@
            </div>

            <div class="workflow-box__item workflow-box-grid">
                
                    @foreach (var buttonsRow in stand.McuPlatform.ListRowsButtons)
                    {
                        <div class="workflow-box-buttons">
                        @foreach (var button in buttonsRow)
                        {
                            <IotRemoteLaboratory.UI.Components.Controls.CheckBox Text="@button.Title" StateChanged="@OnButtonStateChanged" IsChecked="@button.IsActive" />
                        }
                        </div>
                    }
            </div>

            <div class="workflow-box__item -stretch">
                <IotRemoteLaboratory.UI.Components.Controls.Terminal PublishMessage="@TerminalMessagePublish" TerminalLogs="@TerminalLines" />
            </div>
        </div>
    </div>
    <div class="stand-workflow__right">

        <div class="workflow-box">
            <div class="workflow-box__item -stretch">
                <IotRemoteLaboratory.UI.Components.Controls.MonacoEditor />
            </div>
        </div>
    </div>
</div>


@code {
    [Inject]
    public IStand<IMcuPlatform<ILedButton>> stand { get; set; }
    [Inject]
    public Session Session { get; set; }
    [Inject]
    public MqttPublisher Publisher { get; set; }
    [Inject]
    public MqttSubscriber Subscriber { get; set; }
    [Inject]
    public JanusWebRTCInterop Janus { get; set; }

    private List<object> UartList = new List<object>()
    {
        "UART 1.1","UART 1.2","UART 1.3","UART 1.4"
    };

    // выбор скорость обмена данными (combobox);

    private bool CameraState { get; set; }
    private List<string> TerminalLines { get; set; } = new();
    private uint FontSize = 14;

    void TerminalMessagePublish(string command)
    {
        if (command?.Length == 0)
            return;

        Publisher.PublishMessageAsync(Topics.TerminalDataTo.Replace("+", stand.Id.ToString()), command);
    }

    void OnButtonStateChanged(Tuple<string, bool> tuple)
    {
        Publisher.PublishMessageAsync(Topics.LedButtonState.Replace("+", stand.Id.ToString()).Replace("#", tuple.Item1), tuple.Item2 ? 1.ToString() : 0.ToString());
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

            if (!Publisher.IsConnected)
                Publisher.Connect();
            if (!Subscriber.IsConnected)
                Subscriber.Connect();

            Subscriber.MessageReceivedEvent += (topic, value) =>
            {
                if (topic.Contains("/gpio/led/"))
                {
                    var buttonPort = topic.Replace("/lab/stand/0/gpio/led/", "");
                    foreach (var buttonRow in stand.McuPlatform.ListRowsButtons)
                    {
                        if (buttonRow.First().Title.EndsWith("_") != buttonPort.EndsWith("_"))
                            continue;

                        foreach (var button in buttonRow)
                        {
                            if (button.Title == buttonPort)
                            {
                                if (value == "1")
                                    button.IsActive = true;
                                else
                                    button.IsActive = false;
                            }
                        }
                    }
                }else if (topic.Contains("/serial/out"))
                {
                    TerminalLines.Add(value);
                }
                else if (topic.Contains("/serial/in"))
                {
                    TerminalLines.Add($"[Server]{value}");
                }

                InvokeAsync(StateHasChanged);
            };
        }
        
        base.OnAfterRender(firstRender);
    }


    #region MqttMessage Handlers



    #endregion MqttMessage Handlers
}
