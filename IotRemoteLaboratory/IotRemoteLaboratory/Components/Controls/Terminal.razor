@using System.Collections.Generic;
@using System;
@using IotRemoteLaboratory.Models
@using System.Text.Json
@using IotRemoteLaboratory.Mqtt
@rendermode InteractiveServer

<style>
    .terminal-block {
        height: 400px;
        max-height: 400px;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
    }

    .terminal-block_input {
        
    }

    .terminal-block_content {
        height: 380px;
        width: 100%;
        overflow: auto;
        flex-grow: 1;
        font-size: 12px;
        min-height: 18px;
        word-break: break-all;
    }

    .terminal-message-list {
        list-style-type: none;
        padding: 0;
    }

    .terminal-message_item {
        content: ">";
        margin-right: 0.5em;
    }
</style>

<div class="terminal-block">
    <div class="terminal-block_content">
        <ul class="terminal-message-list">
        @for (var i = 0; i < TerminalContent.Count; i++)
        {
            <li class="terminal-message_item">@TerminalContent[i]</li>
        }
        </ul>
    </div>
     <div class="terminal-block_input">
        <input @bind-value="@inputStr" />
        <button @onclick="SendMessage">Send</button>
     </div>
</div>

@code {
    [Inject]
    public MqttPublisher Publisher { get; set; }

    [Parameter]
    public List<string> TerminalContent { get; set; }

    private string inputStr = string.Empty;


    private void SendMessage()
    {
        Publisher.PublishMessageAsync(Topics.TerminalDataTo, inputStr);
        // чистим поле ввода.
        inputStr = string.Empty;
    }
}