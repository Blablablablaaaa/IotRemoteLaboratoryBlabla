@using IotRemoteLaboratory.CodeExecutor
@using IotRemoteLaboratory.Interops
@using IotRemoteLaboratory.Models
@using IotRemoteLaboratory.Mqtt
@using System.Text.Json
@using System.Diagnostics
@using System.Text

@rendermode InteractiveServer

<style>

    .editor {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .editor__buttons {
        flex: 0 0 auto;
        display: flex;
    }

    .editor__buttons-left {
        flex: 0 0 1;
    }

    .editor__buttons-right {
        flex: 0 0 auto;
    }

    .editor__monacoeditor {
        flex: 1 0 0;
        margin-bottom: 8px;
    }

        .editor__monacoeditor .code-container {
            height: 100%;
            border: 1px solid #1E1E1E;
            overflow: hidden;
        }

    .editor__output {
        flex: 0 0 200px;
        border: 1px solid #1E1E1E;
        padding: 8px;
        background: #2C2C2C;
        font-size: 14px;
        font-weight: 400;
        line-height: 1;
    }



    .buttons-row {
        display: flex;
        gap: 8px;
    }

    .ghost-icon-button {
        background: transparent;
        display: flex;
        border: 1px solid #BFB2FF;
        border-radius: 2px;
        padding: 8px 16px 8px 8px;
        align-items: center;
        margin-right: 8px;
    }

        .ghost-icon-button svg {
            display: block;
            width: 100%;
            height: 100%;
            max-width: 18px;
            margin-right: 8px;
        }

        .ghost-icon-button span {
            color: #BFB2FF;
            font-size: 14px;
            font-weight: 400;
            line-height: 1;
        }

    .workflow-box__left-content {
    }

    .workflow-box__right-content {
    }


    .icon-button {
        padding: 8px;
        background: #2C2C2C;
        border: 1px solid #1E1E1E;
        border-radius: 5px;
    }

        .icon-button svg {
            height: 100%;
            width: 100%;
            max-width: 24px;
            display: block;
            fill: var(--font-color-main);
        }


    .buttons-row {
        display: flex;
    }

</style>

<div class="editor">
    <div class="editor__buttons">
        <div class="editor__buttons-left">
        <button class="ghost-icon-button" onclick="@RunClick">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
                <mask id="mask0_279_2206" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="18" height="18">
                    <rect width="18" height="18" fill="#D9D9D9" />
                </mask>
                <g mask="url(#mask0_279_2206)">
                    <path d="M12.2319 15.375L15.1915 13.5L12.2319 11.625V15.375ZM4.27784 6.75H13.1568V5.25H4.27784V6.75ZM13.1568 17.25C12.1332 17.25 11.2609 16.8845 10.5397 16.1535C9.81804 15.422 9.45721 14.5375 9.45721 13.5C9.45721 12.4625 9.81804 11.578 10.5397 10.8465C11.2609 10.1155 12.1332 9.75 13.1568 9.75C14.1803 9.75 15.0529 10.1155 15.7746 10.8465C16.4957 11.578 16.8563 12.4625 16.8563 13.5C16.8563 14.5375 16.4957 15.422 15.7746 16.1535C15.0529 16.8845 14.1803 17.25 13.1568 17.25ZM2.05811 16.5V3.75C2.05811 3.3375 2.20288 2.98425 2.49243 2.69025C2.78248 2.39675 3.13098 2.25 3.53793 2.25H13.8967C14.3036 2.25 14.6521 2.39675 14.9422 2.69025C15.2317 2.98425 15.3765 3.3375 15.3765 3.75V8.75625C15.1422 8.64375 14.9017 8.55 14.6551 8.475C14.4084 8.4 14.1556 8.34375 13.8967 8.30625V3.75H3.53793V14.2875H8.03288C8.09454 14.675 8.19024 15.0437 8.31997 15.3937C8.4492 15.7437 8.61864 16.075 8.82828 16.3875L8.7173 16.5L7.60743 15.375L6.49757 16.5L5.3877 15.375L4.27784 16.5L3.16797 15.375L2.05811 16.5ZM4.27784 12.75H8.03288C8.06988 12.4875 8.12537 12.2313 8.19936 11.9813C8.27335 11.7312 8.36584 11.4875 8.47683 11.25H4.27784V12.75ZM4.27784 9.75H9.5312C9.99981 9.2875 10.5454 8.92175 11.1679 8.65275C11.7909 8.38425 12.4538 8.25 13.1568 8.25H4.27784V9.75Z" fill="#BFB2FF" />
                </g>
            </svg>
            <span>Run</span>
        </button>
        </div>

        <div class="editor__buttons-right">
            <button class="ghost-icon-button" onclick="@RunClick">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
                    <mask id="mask0_279_2211" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="18" height="18">
                        <rect width="18" height="18" fill="#D9D9D9" />
                    </mask>
                    <g mask="url(#mask0_279_2211)">
                        <path d="M8.25 12.75H9.75V9.6L10.95 10.8L12 9.75L9 6.75L6 9.75L7.05 10.8L8.25 9.6V12.75ZM3 15C2.5875 15 2.2345 14.8533 1.941 14.5597C1.647 14.2657 1.5 13.9125 1.5 13.5V4.5C1.5 4.0875 1.647 3.7345 1.941 3.441C2.2345 3.147 2.5875 3 3 3H7.5L9 4.5H15C15.4125 4.5 15.7657 4.647 16.0597 4.941C16.3533 5.2345 16.5 5.5875 16.5 6V13.5C16.5 13.9125 16.3533 14.2657 16.0597 14.5597C15.7657 14.8533 15.4125 15 15 15H3ZM3 4.5V13.5H15V6H8.38125L6.88125 4.5H3Z" fill="#BFB2FF" />
                    </g>
                </svg>
                <span>Build File</span>
            </button>
        </div>

        <InputFile OnChange="FileUploaded" />
        <button style="margin-left: 32px;" onclick="@DecreaseFontSize">-</button>
        <span style="margin-left: 8px;">@CurrentFontSize</span>
        <button style="margin-left: 8px;" onclick="@IncreaseFontSize">+</button>
    </div>

    <div class="editor__monacoeditor">
        <div id="container" class="code-container"></div>
    </div>

    <div class="editor__output">
        @output
    </div>

</div>

@code {
    const int MaxFileSize = 5000 * 1024;
    private string output = string.Empty;

    [Inject]
    public MonacoEditorInterop Monaco { get; set; }


    private uint _currentFontSize = 14;
    [Parameter]
    public uint CurrentFontSize 
    { 
        get => _currentFontSize; set
        {
            _currentFontSize = value;
            ChangedFontSize();
        }
    }

    private bool _isReadonly = false;
    [Parameter]
    public bool IsReadonly 
    { 
        get => _isReadonly; set
        {
            _isReadonly = value;
            ChangeReadonlyMode();
        }
    }


    /// <summary>
    /// Сохраняет код с ide и запускает его.
    /// </summary>
    public async void RunClick()
    {
        var dirPath = "C:\\0";
        var filePath = dirPath + "\\test.py";

        if (!Directory.Exists(dirPath))
            Directory.CreateDirectory(dirPath);

        IsReadonly = !IsReadonly;

        output = string.Empty;


        var code = Monaco.GetCode("container");
        await Task.Run(() =>
        {
            File.WriteAllText(filePath, code.Result);
            RunCode(filePath, new PythonExecutor());
        });
    }


    private async void RunCode(string filePath, ICodeExecutor codeExecutor)
    {
        if (!codeExecutor.IsCorrectFileExtension(filePath))
            return;

        var cmd = $"-u {filePath}";   

        codeExecutor.CodeWasExecuted += (s) =>
        {
            output = s;
            InvokeAsync(StateHasChanged);
            IsReadonly = false;
        };

        await Task.Run(() => codeExecutor.ExecuteFile(filePath, cmd));
    }

    /// <summary>
    /// Загружает пользовательский файл на компьютер
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    public async Task FileUploaded(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;

        if (browserFile == null)
            return;

        var fileSize = browserFile.Size;
        var fileType = browserFile.ContentType;
        var fileName = browserFile.Name;
        var lastModified = browserFile.LastModified;

        try
        {
            var fileStream = browserFile.OpenReadStream(MaxFileSize);

            var tempFileName = Path.GetTempFileName();
            var extension = Path.GetExtension(fileName);
            var targetFilePath = Path.ChangeExtension(tempFileName, extension);

            // save temp file
            var targetStream = new FileStream(targetFilePath, FileMode.Create);
            // copy to target file
            await fileStream.CopyToAsync(targetStream);
            targetStream.Close();

            // run code
            RunCode(targetFilePath, new PythonExecutor());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


    #region Monaco Editor Methods


    private void ChangeReadonlyMode()
    {
        Monaco.ReadonlyMode("container", IsReadonly);
    }

    public void ChangedFontSize()
    {
        Monaco.ChangeFontSize("container", CurrentFontSize);
    }


    #region Button Clicks


    public void DecreaseFontSize()
    {
        CurrentFontSize--;
    }

    public void IncreaseFontSize()
    {
        CurrentFontSize++;
    }


    #endregion Button Clicks


    #endregion Monaco Editor Methods


    #region Component Methods

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        Monaco.Reload("container");
        if (firstRender)
        {
            Monaco.Initialize("container", @"def main():
        print('Hello, World')

    if __name__ == '__main__':
        main()", "python", (s) =>
{
});
        }
    }


    #endregion Component Methods
}
