@using IotRemoteLaboratory.Interops
@using IotRemoteLaboratory.Models
@using IotRemoteLaboratory.Mqtt
@using System.Text.Json
@rendermode InteractiveServer

<div id="container" style="width:100%;height:400px;border:1px solid grey"></div>
<textarea rows="10" cols="100">@output</textarea>

@code {
    private string output = string.Empty;

    [Inject]
    public Session Session { get; set; } 
    [Inject]
    public MonacoEditorInterop Monaco { get; set; }

    [Parameter]
    public EventCallback<string> OnIdeChanged { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender) 
        {
            Monaco.Initialize("container", @"Console.WriteLine(""Hello World"");", "csharp", (s) =>
            {
                var pak = new MqttPackage<string>(Session.User, s);
                var g = JsonSerializer.Serialize(pak);
                Session.MqttController.PublishMessage(g);
                //OnIdeChanged.InvokeAsync(s);
            });

            Session.MqttController.MessageReceivedEvent += (s) => 
            {
                try
                {
                    var pak = JsonSerializer.Deserialize<MqttPackage<string>>(s);
                    if (pak.User.Name != Session.User.Name)
                    {
                        var code = Monaco.GetCode("container");
                        if (pak.Message != code && code != null)
                            Monaco.SetCode("container", pak.Message);
                    }
                        
                }
                catch { }
            };
        }
    }
}
