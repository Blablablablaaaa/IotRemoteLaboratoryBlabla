<style>
    .combobox {
        border: 1px solid #1e1e1e;
        border-radius: 5px;
        background: #2c2c2c;
        position: relative;
        cursor: pointer;
    }

        .combobox:before {
            display: block;
            content: '';
            position: absolute;
            top: 50%;
            margin-top: -5px;
            right: 12px;
            height: 6px;
            width: 6px;
            border-bottom: 2px solid var(--font-color-active);
            border-right: 2px solid var(--font-color-active);
            transform: rotate(45deg);
            transition: .3s;
        }

        .combobox.-visible:before {
            transform: rotate(225deg);
            margin-top: -2px;
            transition: .3s;
        }

    .combobox__item {
        padding: 8px 32px 8px 16px;
        font-size: 14px;
        font-weight: 500;
        line-height: 1.3;
    }

        .combobox__item.-selected {
            color: var(--font-color-active);
        }

    .combobox__items {
        display: none;
        position: absolute;
        top: calc(100% + 5px);
        border: 1px solid #1e1e1e;
        background: #2C2C2C;
        border-radius: 5px;
        width: 100%;
    }

        .combobox__items .combobox__item:first-child {
            border-radius: 5px 5px 0px 0px;
        }

        .combobox__items .combobox__item:last-child {
            border-radius: 0px 0px 5px 5px;
        }

        .combobox__items .combobox__item:hover {
            background: #333;
        }

    .combobox.-visible .combobox__items {
        display: block;
    }

    .combobox__header {}
</style>


<div class="combobox @(IsDropDownOpen ? "-visible" : "")">
    
    <div class="combobox__header" @onclick="@HeaderClick">
        <div class="combobox__item">
            @_selectedItem?.ToString()
        </div>
    </div>

    <div class="combobox__items">
        @foreach (var i in Items) {
            <div class="combobox__item @(_selectedItem == i ? "-selected" : "")" @onclick="@(e => SelectItem(i))">
                @i?.ToString()
            </div>
        }
    </div>
</div> 


@code {
    /// <summary>
    /// Выбранные элемент
    /// </summary>
    private object _selectedItem;


    #region Parameters


    /// <summary>
    /// Список элементов в списке.
    /// </summary>
    [Parameter]
    public List<object> Items { get; set; } = new List<object>();
    /// <summary>
    /// Состояние выпадающего меню (открыто/закрыто)
    /// </summary>
    [Parameter]
    public bool IsDropDownOpen { get; set; }
    /// <summary>
    /// Оставляет меню открытым когда пользователь выбрал элемент.
    /// </summary>
    [Parameter]
    public bool IsStaysOpen { get; set; }


    #endregion Parameters


    #region Constructors


    public ComboBox()
    {
        if (Items.Count > 0)
            _selectedItem = Items[0];
        else
            _selectedItem = "Not Selected";
    }


    #endregion Constructors


    #region Public & Protected Methods


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            _selectedItem = Items[0];
            InvokeAsync(StateHasChanged);
        }
    }


    #endregion Public & Protected Methods


    #region Private Methods


    /// <summary>
    /// Открывает/Закрывает Combobox при клике на togglebutton (header).
    /// </summary>
    void HeaderClick()
    {
        IsDropDownOpen = !IsDropDownOpen;
    }

    /// <summary>
    /// Делает элемент из выпадающего списка который выбрал пользователь, выбранным. 
    /// </summary>
    /// <param name="item">Элемент который выбрал пользователь</param>
    void SelectItem(object? item)
    {
        _selectedItem = item;

        if (!IsStaysOpen)
            IsDropDownOpen = false;
    }


    #endregion Private Methods
}
